//GUI.cpp设置
#include <cstdint>
#include <string>
#include <mutex>
#include <vector>
#include <variant>
#include <tuple>

#include "imgui/imgui.h"
#include "imgui/imgui_stdlib.h"

#include "CheatManager.hpp"
#include "GUI.hpp"
#include "Memory.hpp"
#include "SkinDatabase.hpp"
#include "Utils.hpp"

inline void footer() noexcept
{
	ImGui::Separator();
	ImGui::textUnformattedCentered((std::string("Last Update: ") + __DATE__ + " - " + __TIME__).c_str());
	ImGui::textUnformattedCentered(buildText.c_str());
	ImGui::textUnformattedCentered("本软件完全免费，请勿上当受骗花钱购买");
}

void GUI::render() noexcept
{
	static const auto player{ cheatManager.memory->localPlayer };
	static bool show_log = false;
	if (show_log) {
		ImGui::Begin("Log", nullptr);
		cheatManager.logger->draw();
	}
	static const auto vectorGetter = [](void* vec, const std::int32_t idx, const char** out_text) noexcept
	{
		const auto& vector{ *static_cast<std::vector<SkinDatabase::PetsInfo>*>(vec) };
		if (idx < 0 || idx > static_cast<std::int32_t>(vector.size())) return false;
		*out_text = idx == 0 ? "Default" : vector.at(idx - 1).skinName;
		return true;
	};

	std::call_once(this->changeSkin, [&]() noexcept -> void {
		const auto& pet{ cheatManager.database->pets[cheatManager.config->currentComboSkinIndex - 1] };
		std::int32_t count{ 0 };
		if (std::holds_alternative<std::int32_t>(pet.skinCount))
			count = std::get<std::int32_t>(pet.skinCount);
		else if (std::holds_alternative<std::pair<std::int32_t, std::int32_t>>(pet.skinCount))
			count = std::get<std::pair<std::int32_t, std::int32_t>>(pet.skinCount).second;

		if (cheatManager.config->currentComboSkinIndex > 0 && cheatManager.config->curretSkinId > count)
			cheatManager.config->curretSkinId = 1;

		if (cheatManager.config->currentComboSkinIndex > 0)
			player->changeSkin(cheatManager.database->pets[cheatManager.config->currentComboSkinIndex - 1].modelName, cheatManager.config->curretSkinId);
	});

	ImGui::Begin("R3nzSkinTFT", nullptr, ImGuiWindowFlags_NoCollapse | ImGuiWindowFlags_NoResize | ImGuiWindowFlags_NoScrollbar | ImGuiWindowFlags_NoScrollWithMouse | ImGuiWindowFlags_AlwaysAutoResize);
	if (ImGui::BeginTabBar("TabBar", ImGuiTabBarFlags_Reorderable | ImGuiTabBarFlags_FittingPolicyScroll | ImGuiTabBarFlags_NoTooltip)) {

		if (ImGui::BeginTabItem("小小英雄设置")) {
			if (ImGui::Combo("皮肤选择", &cheatManager.config->currentComboSkinIndex, vectorGetter, static_cast<void*>(&cheatManager.database->pets), cheatManager.database->pets.size() + 1)) {
				const auto& pet{ cheatManager.database->pets[cheatManager.config->currentComboSkinIndex - 1] };
				if (std::holds_alternative<std::int32_t>(pet.skinCount))
					cheatManager.config->curretSkinId = 1;
				else if (std::holds_alternative<std::pair<std::int32_t, std::int32_t>>(pet.skinCount))
					cheatManager.config->curretSkinId = std::get<std::pair<std::int32_t, std::int32_t>>(pet.skinCount).first;
			}

			const auto& pet{ cheatManager.database->pets[cheatManager.config->currentComboSkinIndex - 1] };
			if (std::holds_alternative<std::int32_t>(pet.skinCount)) {
				ImGui::SliderInt("拖动选择颜色", &cheatManager.config->curretSkinId, 1, std::get<std::int32_t>(pet.skinCount));
			}
			else if (std::holds_alternative<std::pair<std::int32_t, std::int32_t>>(pet.skinCount)) {
				const auto pair{ std::get<std::pair<std::int32_t, std::int32_t>>(pet.skinCount) };
				ImGui::SliderInt("拖动选择颜色", &cheatManager.config->curretSkinId, pair.first, pair.second);
			}

			if (ImGui::Button("确认更改"))
				player->changeSkin(cheatManager.database->pets[cheatManager.config->currentComboSkinIndex - 1].modelName, cheatManager.config->curretSkinId);

			ImGui::hotkey("菜单呼出按钮（键盘）", cheatManager.config->menuKey);
			footer();
			ImGui::EndTabItem();
		}
	}
	ImGui::End();
}

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//中文设置
Hooks.cpp第171行
			cfg.SizePixels = 15.0f;
			io.Fonts->AddFontFromFileTTF("c:\\Windows\\Fonts\\msyh.ttc", 15.0f, nullptr,
				io.Fonts->GetGlyphRangesChineseFull());
